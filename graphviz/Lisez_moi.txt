En savoir plus sur Graphivz:
http://graphviz.org/
http://cyberzoide.developpez.com/graphviz/
http://fr.wikipedia.org/wiki/Graphviz

Les tests ayant été effectués dans l'environnement Windows, tout ce qui suit concerne cet environnement.


1) Installation de Graphviz:

   Il n'est pas indispensable d'uliser la procédure d'installation "graphviz-2.12.exe", vous pouvez vous contenter de décompacter 
   "graphviz-win-2.12.bin.tar.gz" dans le dossier de votre choix (aucune écriture dans la base de registre).
   Le module "dot.exe" sera appelé depuis une ligne de commande.

2) Dans le code source "Graphviz.py", renseigner les chemins d'accès et le nom du module à examiner:

   a) Indiquer le nom du module Python à analyser:
      - Renseignez la variable "mon_module" 
  
   b) Localiser l'emplacement de votre module Python à analyser
      - Renseignez la variable "chemin_mon_module" 
     
   c) Localiser l'emplacement du module "dot.exe" de Graphviz
      - Renseignez la variable "chemin_Graphviz" 

  
3) Exécution:
   
   a) "Graphviz.py" genère le fichier "Mon_module_dot.txt" 	==> fichier paramètres pour Graphviz
   
   b) "Graphviz.py" genère le fichier "Mon_module_Graphviz.cmd" ==> fichier de commande pour exécuter Graphviz
      Si vous êtes dans l'environnement Windows, le fichier de commande est lançé automatiquement et provoque l'affichage du graphe.	
	
   c) Les fichiers "Mon_module_ligne_code.txt" et Mon_module_debug.txt" sont optionnels.
	
4) Informations:

   a) "<Main>" est le mom symbolique de la procédure principale:
       Il faut un point d'ancrage à Graphviz pour représenter un appel de fonction depuis la procédure principale. 
	   
   b) Les liaisons en pointillés représentent les appels par "bind"
	
   c) Les classes marquées "NoDef" sont des classes sans méthodes utilisées pour la gestion des erreurs et appelées par "raise"
 

AVERTISSEMENT : Ca ne marche pas à tous les coups !!!
Il y a de multiples façons d'utiliser les Classes et d'appeler les méthodes de classes ou fonctions, le code proposé se limite à 
examiner les cas les plus simples.

Ce code est donc livré sans AUCUNE GARANTIE D'EXACTITUDE !!!

Les cas ou ça ne marche pas:

Les liens seront inéxacts ou absents

	a) Votre module n'a pas de classe, de méthodes ni d'appel de fonction.

	b) Le nom de la fonction (appelée ou appelante) est stockée dans une variable, liste ou dictionnaire.
	
	c) Utiliser un mom reservé pour nommer une fonction, ou une variable a le même nom qu'une fonction.
	   exemple
	  	def open():
	  	    ......
	  	fichier = open("fic.txt","r")	
	  	
	d) Fonctions imbriquées:
	   exemple : module Main.py de la distribution standard
	
		def initial_color(s, colordb):
		    # function called on every color
		    def scan_color(s, colordb=colordb):
		        try:
			    r, g, b = colordb.find_byname(s)
			except ColorDB.BadColor:
			    try:
			    	........
	  La fonction "def scan_color" n'est pas vue par "pyclbr.py"
	  
	e) Création conditionnelle de classes
	   exemple
		if test > 1:
		    class Ma_Classe:
			def __init__(self):
			    pass
			def fonction_1(self):
			    print "fonction_1"
		else:
		    class Ma_Classe:
			def __init__(self):
			    pass
			def fonction_2(self):
            		    print "fonction_2"	
            		    
           "pyclbr.py" ne voit que la dernière création de "Ma_Classe et "fonction_1()" ne sera pas consideré 
           comme appartemant à "Ma_classe"
	  
	f) Héritage de classe
	   exemple
		class Ma_Classe:
		    def __init__(self):
			pass
		    def fonction_1(self):
			print "fonction_1 class=Ma_Classe"
			
		class Ma_Classe_bis(Ma_Classe):
		    def __init__(self):
			pass
		    def fonction_2(self):
			print "fonction_2"

		c = Ma_Classe_bis()
		c.fonction_1()
		
	   L'instance de classe "c" renvoie à "Ma_Classe_bis" et "c.fonction_1()" ne sera pas trouvé.
	  
	  
	   etc.....